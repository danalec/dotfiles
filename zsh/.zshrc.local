#                 888                     
#                 888                     
#                 888                     
# 88888888.d8888b 88888b. 888d888 .d8888b 
#    d88P 88K     888 "88b888P"  d88P"    
#   d88P  "Y8888b.888  888888    888      
#  d88P        X88888  888888    Y88b.    
# 88888888 88888P'888  888888     "Y8888P 
#
# ░ author ░ Dan Alec <danalec@gmail.com>
# ░  code  ░ https://github.com/danalec/dotfiles
#
# ~danalec/.zshrc.local
# last modified : 2016-11-14
#
#█▓▒░ 修正、改変、再配布何でも可 ░▒▓█

#
# keybindings (zkbd compatible hash)
#

# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins
# http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
#key[PageUp]=${terminfo[kpp]}
#key[PageDown]=${terminfo[knp]}

[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
#[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
#[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history
[[ -n "${key[^[[A]]]}"   ]]  && bindkey  "^[[A"             history-substring-search-up
[[ -n "${key[^[[B]]]}"   ]]  && bindkey  "^[[B"             history-substring-search-down
#[[ -n "${key[k]}"        ]]  && bindkey  -M vicmd "k"       history-substring-search-up
#[[ -n "${key[j]}"        ]]  && bindkey  -M vicmd "j"       history-substring-search-down

# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init () {
    printf '%s' "${terminfo[smkx]}"
  }
  function zle-line-finish () {
    printf '%s' "${terminfo[rmkx]}"
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

bindkey '^?' backward-delete-char                     # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
  bindkey "${terminfo[kdch1]}" delete-char            # [Delete] - delete forward
else
  bindkey "^[[3~" delete-char
  bindkey "^[3;5~" delete-char
  bindkey "\e[3~" delete-char
fi
bindkey ' ' magic-space                               # [Space] - do history expansion
bindkey '\ew' kill-region                             # [Esc-w] - Kill from the cursor to the mark
bindkey -s '\el' 'ls\n'                               # [Esc-l] - run command: ls
bindkey '^r' history-incremental-search-backward      # [Ctrl-r] - Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
bindkey '^[[1;5C' forward-word                        # [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word                       # [Ctrl-LeftArrow] - move backward one word
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line      # [Home] - Go to beginning of line
fi
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}"  end-of-line            # [End] - Go to end of line
fi

if [[ "${terminfo[kcbt]}" != "" ]]; then
  bindkey "${terminfo[kcbt]}" reverse-menu-complete   # [Shift-Tab] - move through the completion menu backwards
fi

# start typing + [Up-Arrow] - fuzzy find history forward
if [[ "${terminfo[kcuu1]}" != "" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# start typing + [Down-Arrow] - fuzzy find history backward
if [[ "${terminfo[kcud1]}" != "" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# file rename magick
bindkey "^[m" copy-prev-shell-word


#
# functions
#

# create automatically virtualenv
_virtualenv_auto_activate() {
    if [ -d "venv" ]; then
        # check if already activated, avoids redundant activating
        if [ "$VIRTUAL_ENV" != "$(pwd -P)/venv" ]; then
            export _VENV_NAME=${$(pwd):t}
            echo Activating virtualenv \"$_VENV_NAME\"...
            export VIRTUAL_ENV_DISABLE_PROMPT=1
            source venv/bin/activate
        fi
    fi
}

# quick find by filename
qf (){
  if [ "$1" != "" ] && [ -"$2" != "" ]; then
    find $1 -name $2 2>/dev/null
  else
    echo "usage: qf path filename"
  fi
}

# generate random password
randpwd () { 
  if [ "$1" != "" ]; then
    gpg --gen-random --armor 1 $1
  else
    echo "usage: randpwd passlength"
  fi
}
# remove duplicated lines without sort
removeduplicates () { 
  if [ "$1" != "" ]; then
    awk '!x[$0]++' $1
  else
    echo "usage: removeduplicates filename"
  fi
}

# year calendar or current month
calendar () { 
  if [ "$1" != "" ]; then
    paste <(cal -y $1) | expand -t70
    read
  else
    cal
    read
  fi
}

# simple counter
beep() {
    local __timer=0
    [[ -n "$1" ]] && __timer=$1
    until [[ $__timer = 0 ]]; do
        printf "  T minus $__timer     \r"
        __timer=$((__timer - 1))
        sleep 1
    done
    echo '- BEEP! -    \a\r'
}

# lazypack
cd() { builtin cd "$@"; ls -lahF --color=auto; }

:e() { subl3 "$@"; }

pac() { sudo pacman "$@"; }

greppy() { grep -n "$1" *.py; }

mcd () { mkdir -p "$1" && cd "$1"; }

myps() { ps $@ -u "$USER" -o pid,%cpu,%mem,start,time,bsdtime,command ; }

zipf () { zip -r "$1".zip "$1" ; }

fpid () { lsof -t -c "$@" ; }               # find pid of process

ff () { /usr/bin/find . -name "$@" ; }      # find file under the current directory

ffs () { /usr/bin/find . -name "$@"'*' ; }  # find file whose name starts with a given string

ffe () { /usr/bin/find . -name '*'"$@" ; }  # find file whose name ends with a given string

extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

ii() {
    echo "# hostname: ${RED}$HOST"
    echo "# kernel:$NC " ; uname -a
    echo "# users logged on:$NC " ; w -h
    echo "# current date :$NC " ; date
    echo "# machine stats :$NC " ; uptime
    echo "# public facing IP Address :$NC " ; curl ipinfo.io/ip
}

# nullpointer url shortener
short() { curl -F"shorten=$*" https://0x0.st }

httpHeaders () { /usr/bin/curl -I -L $@ ; }

httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }

# get the content type of an http resource
htmime () {
  if [[ -z $1 ]]; then
    print "USAGE: htmime <URL>"
    return 1
  fi
  mime=$(curl -sIX HEAD $1 | sed -nr "s/Content-Type: (.+)/\1/p")
  print $mime
}

json_post() {
  url=$1
  method=$2
  json=$3
  curl -v -H "Accept: application/json" -H "Content-type: application/json" -X ${method} -d ${json} ${url}
}

# git rebase -i
grbi() {
  if [ "$1" -gt 0 ]; then
    git rebase -i "HEAD~${1}"
  else
    echo "usage: grbi n\n  (n is number greater then 0)"
  fi
}

bqj() {
  local job_id=$1
  shift
  bq --format=json show -j $job_id | jq $@
}

# read markdown files like manpages
md() { pandoc -s -f markdown -t man "$*" | man -l - }

# colorized less
l() { pygmentize -O style=sourcerer -f console256 -g $1 | less -r }

# colorized cat
c() {
  for file in "$@"
  do
    pygmentize -O style=sourcerer -f console256 -g "$file" 
  done
}

# print a separator banner, as wide as the terminal
hr() {
  print ${(l:COLUMNS::=:)}
}

dls () {
 # directory LS
 echo `ls -l | grep "^d" | awk '{ print $9 }' | tr -d "/"`
}

dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}

dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}

psgrep() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}

pathadd() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi
}

function url-encode; {
    setopt extendedglob
    echo "${${(j: :)@}//(#b)(?)/%$[[##16]##${match[1]}]}"
}

:w() {
    xdg-open "http://en.wikipedia.org/w/index.php?search=`url-encode "${(j: :)@}"`"
}
:yt() {
    xdg-open "https://www.youtube.com/results?search_query=`url-encode "${(j: :)@}"`"
}
:g() {
    xdg-open "https://www.google.com/search?q=`url-encode "${(j: :)@}"`"
}
:gi() {
    xdg-open "http://www.duckduckgo.com/?q=!gi+`url-encode "${(j: :)@}"`"
}
:gh() {
    xdg-open "https://github.com/search?q=`url-encode "${(j: :)@}"`"
}
:s() {
    xdg-open "http://www.duckduckgo.com/?q=`url-encode "${(j: :)@}"`"
}
:d() {
    xdg-open "http://www.duckduckgo.com/?q=!d+`url-encode "${(j: :)@}"`"
}
:t() {
    xdg-open "http://www.duckduckgo.com/?q=!t+`url-encode "${(j: :)@}"`"
}

if type hub > /dev/null 2>&1; then
  function git() {
    hub "$@"
  }
fi

# colors for permissions
if [[ "$EUID" -ne "0" ]]
then  # if user is not root
  USER_LEVEL="%F{cyan}"
else # root!
  USER_LEVEL="%F{red}"
fi

# display a list of supported colors
function lscolors {
  ((cols = $COLUMNS - 4))
  s=$(printf %${cols}s)
  for i in {000..$(tput colors)}; do
    echo -e $i $(tput setaf $i; tput setab $i)${s// /=}$(tput op);
  done
}

# Create short urls via http://goo.gl using curl(1).
# Contributed back to grml zshrc
# API reference: https://code.google.com/apis/urlshortener/
function zurl {
  if [[ -z $1 ]]; then
    print "USAGE: $0 <URL>"
    return 1
  fi

  local url=$1
  local api="https://www.googleapis.com/urlshortener/v1/url"
  local data

  # Prepend "http://" to given URL where necessary for later output.
  if [[ $url != http(s|)://* ]]; then
    url="http://$url"
  fi
  local json="{\"longUrl\": \"$url\"}"

  data=$(curl --silent -H "Content-Type: application/json" -d $json $api)
  # Match against a regex and print it
  if [[ $data =~ '"id": "(http://goo.gl/[[:alnum:]]+)"' ]]; then
    print $match
  fi
}

# aliases
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'

alias -- -='cd -'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

# List directory contents
alias l='ls --color -lah'
alias ll="ls -lahF --color=auto"
alias la='ls -lAhF --color=auto'
alias ls='ls --color=auto -hFg --color=auto'
alias lsa='ls -lah --color=auto'
alias lsl="ls -lhF --color=auto"

# Push and pop directories on directory stack
alias pu='pushd'
alias po='popd'

alias ':e'='$EDITOR'
alias ':s'='subl3'
alias 'cd..'='cd ../'
alias ...='cd ../..'
alias ag="ag --color --color-line-number '0;35' --color-match '46;30' --color-path '4;36'"
alias automnt='udiskie -a >/dev/null &'
alias b='ranger'
alias bat='acpi -i'
alias c="tr -d '\n' | pbcopy"
alias catn="cat -n"
alias cdd='cd -'
alias chmod="chmod -c"
alias chown="chown -c"
alias clbin="curl -F 'clbin=<-' https://clbin.com"
alias cls='clear; ls'
alias count='sort | uniq -c | sort -n'  # count something fed in on stdin
alias cp='cp -ivr'
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'
alias d='dirs -v | head -10'
alias disks='echo "╓───── m o u n t . p o i n t s"; echo "╙────────────────────────────────────── ─ ─ "; lsblk -a; echo ""; echo "╓───── d i s k . u s a g e"; echo "╙────────────────────────────────────── ─ ─ "; df -h;'
alias egrep='egrep --color=auto'
alias emacs='$EDITOR'
alias fgrep='fgrep --color=auto'
alias h='history'
alias identify='cat ~/.zhistory | sort | uniq -c | sort -n'
alias ip="curl ipinfo.io/ip"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias irc="irssi"
alias k9='kill -9'
alias ka9='killall -9'
alias less='less -FSRXc'
alias ln="ln -v"
alias ln='ln -v'
alias lol="base64 </dev/urandom | lolcat"
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'
alias manhtml='man --html=$BROWSER '
alias md='mkdir -v -p'
alias mem_hogs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
alias mkdir="mkdir -v -p"
alias mkpkg='makepkg'
alias mpv='mpv --fs --save-position-on-quit .'  # play current folder
alias mroe=more
alias mv='mv -iv'
alias nano='$EDITOR'
alias netCons='lsof -i'                             # show all open TCP/IP sockets
alias nFiles='echo $(ls -1 | wc -l)'                # count of non-hidden files in current dir
alias nvimdiff="nvim -d"
alias path='echo $PATH | tr -s ":" "\n"'
alias pi='seq -f '4/%g' 1 2 99999 | paste -sd-+ | bc -l'
alias prikey="more ~/.ssh/id_rsa | xclip -selection clipboard | echo '=> private key copied to pasteboard.'"
alias pubkey="more ~/.ssh/id_rsa.pub | xclip -selection clipboard | echo '=> public key copied to pasteboard.'"
alias Q='exit'
alias rcp='rsync -v --progress'
alias rd=rmdir
alias record="ffmpeg -f x11grab -s 1920x1080 -an -r 16 -loglevel quiet -i :0.0 -b:v 15M -y" #pass a filename
alias rm='rm -iv'
alias rmdir='rmdir -v'
alias rmv='rsync -v --progress --remove-source-files'
alias scp='scp -r'
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip"
alias sprunge="curl -F 'sprunge=<-' http://sprunge.us"
alias stripcomments="egrep -v '^([\ \t]*#|$)'"      # strip comment & blank lines from an output
alias t='tree -C'
alias ta="tree -Ca"
alias tempwatch="while :; do sensors; sleep 1 && clear; done;"
alias timer='echo "timer started. stop: ^d" && date && time cat && date'
alias toiletlist='for i in ${TOILET_FONT_PATH:=/usr/share/figlet}/*.{t,f}lf; do j=${i##*/}; echo ""; echo "╓───── "$j; echo "╙────────────────────────────────────── ─ ─ "; echo ""; toilet -d "${i%/*}" -f "$j" "${j%.*}"; done'
alias tree='tree -CAFa -I "CVS|*.*.package|.svn|.git|.hg|node_modules|bower_components" --dirsfirst'
alias up='cd ../'
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"' # URL-encode strings
alias vi='$EDITOR'
alias week='date +%V'
alias xsel='xsel -b'
alias ~='cd ~'

# experimental
alias back='popd > /dev/null'
alias free='sync && echo 3 | sudo tee /proc/sys/vm/drop_caches'
alias hello='nmap -sP 192.168.1.0/24; arp-scan --localnet | grep "192.168.1.[0-9]* *ether"'
alias rmpyc='find . -name \*.pyc -delete'
alias yyis="echo ~ (•̀ᴗ•́)و ̑̑ "
#alias cd='pushd > /dev/null'   # experimental
#alias fuck=sudo !!
#alias gp='git push origin HEAD'
#alias npminstall="sudo rm -rf node_modules && sudo npm cache clear && sudo npm cache clean && sudo PYTHON=/usr/bin/python2 npm install"

# fun
alias ascii="toilet -t -f 3d"
alias cafe='cat /dev/urandom | hexdump -C | grep "ca fe"'
alias clock='watch -t -n1 "date +%T|figlet -f 3d"'
alias future="toilet -t -f future"
alias matrix="cmatrix -b"
alias multiplication_table='for i in {1..9}; do for j in $(seq 1 $i); do echo -ne $i×$j=$((i*j))\\t;done; echo;done'
alias rusto="toilet -t -f rusto"
alias rustofat="toilet -t -f rustofat"

# git
alias g="hub"
alias ga="git add"
alias gac='git add -A && git commit -m'
alias gb='git branch'
alias gba='git branch -a'
alias gc="git commit -m"
alias gca='git commit -a'
alias gcb='git copy-branch-name'
alias gco="git checkout"
alias gd='git diff --color | sed "s/^\([^-+ ]*\)[-+ ]/\\1/" | less -r'
alias gdm='git diff master'
alias gf="git fetch"
alias gg="git graph"
alias git="hub"
alias gl='git pull --prune'
alias glog="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias gm="git merge"
alias gp="git push"
alias gpr="hub pull-request"
alias gr="git rebase"
alias grep='grep --color=auto'
alias gs="git status"
alias gs='git status -sb'
alias gu="git unstage"

# log
alias apachelogs="less +F /var/log/apache2/error.log"
alias nginxlogs="less +F /var/log/nginx/error.log"
alias herr='tail /var/log/httpd/error_log'

# pacaur
alias aur="pacaur --noconfirm --noedit "
alias apacaur="aur -S"
alias yaourt="echo 'yaourt? nope. have pacaur instead.' && pacaur"

# pacman
alias apac="pac --noconfirm -S "
alias apacman="apac"
alias pacman="pac"

# sudo
alias _='sudo '
alias checkrootkits="sudo rkhunter --update; sudo rkhunter --propupd; sudo rkhunter --check"
alias checkvirus="sudo clamscan --recursive=yes --infected /home"
alias fuck='sudo $(fc -ln -1)'
alias lsock='sudo /usr/sbin/lsof -i -P'             # display open sockets
alias lsocktcp='sudo /usr/sbin/lsof -nP | grep TCP' # display only open TCP sockets
alias lsockudp='sudo /usr/sbin/lsof -nP | grep UDP' # display only open UDP sockets
alias node="sudo node"
alias npm="sudo npm"
alias npminstall="sudo rm -rf node_modules && sudo npm cache clear && sudo npm cache clean && npm install"
alias openports='sudo lsof -i | grep LISTEN'        # all listening connections
alias please='sudo $(fc -ln -1)'
alias pls='sudo '
alias plz='sudo '
alias showBlocked='sudo ipfw list'                  # all ipfw rules inc/ blocked IPs
alias suco='sudo '
alias sudo='sudo '
alias systemctl="sudo systemctl"
alias updateantivirus="sudo freshclam"

# tar
alias -s bz2='tar -jxvf'
alias -s gz='tar -zxvf'
alias untar='tar -xvf'
alias gz='tar -zcvf'

# trash
alias trash='trash-put'
alias trash_empty="trash-empty"

## more intelligent acking for ubuntu users
if which ack-grep &> /dev/null; then
  alias afind='ack-grep -il'
else
  alias afind='ack -il'
fi